from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/config.yaml"
#validate(config, schema="schemas/config.schema.yaml")
wildcard_constraints:
    patient="Pt0",
    sample="GSM345452[8-9]"

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
# print(samples)
lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
samples = lanes[["sample", "patient"]].drop_duplicates()

cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)
# samples = samples.iloc[0:2]

# urls
BASE_SL1344_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/210/855/GCF_000210855.2_ASM21085v2"

# Directories
FASTQ_DIR = "FASTQ"
ENV_DIR = join("..", "envs")

# Files
STAR_ENV_FILE = join(ENV_DIR, "star.yml")

# Input Files
SRA_FASTQ1_FILE = join(FASTQ_DIR, "{run}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{run}_2.fastq")
SRA_FASTQ3_FILE = join(FASTQ_DIR, "{run}_3.fastq")
HUMAN_FA = "/fdb/GATK_resource_bundle/hg38bundle/Homo_sapiens_assembly38.fasta"
HUMAN_GTF = "raw/genome/gencode.v22.annotation.gtf"

PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R1_001.fastq.gz")
cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R2_001.fastq.gz")
IDX_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_I1_001.fastq.gz")
CR_BAM_FILE = join(CR_SAMPLE_ODIR, "outs", "possorted_genome_bam.bam")
# Intermediate Files
# cDNA_FASTQ_FILE = join(FASTQ_DIR, "{patient}-{sample}",
#                        "cDNAfragmentSequence.fastq.gz")
# CellBarcode_FASTQ_FILE = join(FASTQ_DIR, "{patient}-{sample}",
#                               "CellBarcodeUMIsequence.fastq.gz")
#BAM_FILE = join("output", "HG38-SL1344", "STARsolo", "{patient}-{sample}", "Aligned.sortedByCoord.out.bam")
#SL1344_FA = join("raw", "genome", "SL1344_genome.fa")
#SL1344_GTF = join("raw", "genome", "SL1344.gtf")

# Output File
# FILTERED_PATHSEQ_READS_FILE = join(SC_PATHSEQ_OUTPUT, "Filtered_PathSeq_reads.tsv")

# Snakemake includes
# include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/cellranger.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-single.smk"
include: "../pathogen-discovery-rules/rules/scPathSeq.smk"

rule all:
    input:
        expand(PATHSEQ_CELL_SCORE, zip, patient=cells["patient"], sample=cells["sample"], cell=cells["barcode"])
        # join(config["STARsolo"]["output_dir"], "Aligned.sortedByCoord.out.bam").format(patient="Pt0", sample="infected"),

# download files from SRA
# need to --include-technical to get the 10x UMI and CB reads
# this requires
rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE),
        temp(SRA_FASTQ3_FILE),
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--include-technical --split-files {wildcards.run}"

def get_sra_fq_files(wildcards):
    run_of_interest = lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "Run"]
    return {
        "CellBarcode_fq": expand(SRA_FASTQ1_FILE, run=run_of_interest),
        "cDNA_fq": expand(SRA_FASTQ2_FILE, run=run_of_interest),
        "idx_fq": expand(SRA_FASTQ3_FILE, run=run_of_interest),
    }

# compress and rename
rule compress_rename_SRA_FASTQ_files:
    group:
        "FASTQ"
    input:
        unpack(get_sra_fq_files)
    output:
        CellBarcode_fq = CB_FASTQ_FILE,
        cDNA_fq = cDNA_FASTQ_FILE,
        idx_fq = IDX_FASTQ_FILE
    shell:
        "gzip -vc {input.CellBarcode_fq} > {output.CellBarcode_fq} && "
        "gzip -vc {input.cDNA_fq} > {output.cDNA_fq} && "
        "gzip -vc {input.idx_fq} > {output.idx_fq}"


# # create combined genome
# rule combine_genome:
#     group:
#         "reference"
#     input:
#         HUMAN_FA,
#         SL1344_FA
#     output:
#         config["ref"]["genome"]
#     shell:
#         "cat {input[0]} {input[1]} > {output}"
#
# rule combine_annotation:
#     group:
#         "reference"
#     input:
#         HUMAN_GTF,
#         SL1344_GTF
#     output:
#         config["ref"]["annotation"]
#     shell:
#         "cat {input[0]} {input[1]} > {output}"
#
# # download Salmonella SL1344 genome and gtf file
# rule download_SL1344_files:
#     group:
#         "reference"
#     params:
#         GTF_URL=join(BASE_SL1344_URL, "GCF_000210855.2_ASM21085v2_genomic.gtf.gz"),
#         FA_URL=join(BASE_SL1344_URL, "GCF_000210855.2_ASM21085v2_genomic.fna.gz")
#     output:
#         FA=SL1344_FA,
#         GTF=SL1344_GTF,
#     shell:
#         "wget -O - {params.FA_URL} | gunzip -c > {output.FA} && "
#         "wget -O - {params.GTF_URL} | gunzip -c > {output.GTF}"
