from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

wildcard_constraints:
    patient="[A-Z]{2,3}[0-9]{1,4}" 

patient = config["patient"]
start = config["start"]
stop = config["stop"]
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
# print(samples)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
# validate(units, schema="schemas/units.schema.yaml")
samples = samples.loc[samples.patient == patient]
print(samples.shape)
#samples = samples.loc[samples.plate == plate]
#samples = samples.sample(, random_state=0)
#nrows = min(30, samples.shape[0])
samples = samples.iloc[start:stop]
# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")


include: "../pathogen-discovery-rules/rules/PathSeq-batch.smk"


rule all:
    input:
        pathseq_bam = expand(join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam"), zip, sample=samples["sample"], patient=samples["patient"]),
        pathseq_output = expand(join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt"), zip, sample=samples["sample"], patient=samples["patient"])


rule convert_FASTQ_to_BAM:
    input:
        fq1=FASTQ1_FILE,
        fq2=FASTQ2_FILE
    output:
        config["PathSeq"]["bam_file"]
    shell:
        "module load picard && "
        "java -Xmx8g -XX:ParallelGCThreads=5 -jar $PICARDJARPATH/picard.jar "
        "FastqToSam F1={input.fq1} F2={input.fq2} O={output} "
        "SM={wildcards.sample} RG={wildcards.sample} "
        "TMP_DIR=/lscratch/$SLURM_JOBID"

rule download_FASTQ_files:
    params:
        fq1 = lambda wildcards: samples.loc[(wildcards.patient, wildcards.sample), "fastqR1-file-path"],
        fq2 = lambda wildcards: samples.loc[(wildcards.patient, wildcards.sample), "fastqR2-file-path"],
    output:
        fq1=temp(FASTQ1_FILE),
        fq2=temp(FASTQ2_FILE)
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq1} {output.fq1}  && "
        "gsutil cp {params.fq2} {output.fq2}"
