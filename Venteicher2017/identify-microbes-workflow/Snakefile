from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

wildcard_constraints:
    patient="MGH42|MGH43|MGH44|MGH45|MGH56|MGH57|MGH61|MGH64|MGH103|MGH107"

##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index

# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
RAW_FASTQ1_FILE = "/data/Robinson-SB/Venteicher2017-fastq-files/{sample}_R1.fastq.gz"
RAW_FASTQ2_FILE = "/data/Robinson-SB/Venteicher2017-fastq-files/{sample}_R2.fastq.gz"
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")

# Output Files
PAIRED_FILTERED_BAM = join("output", "PathSeq", "{patient}-{sample}", "filtered-paired.bam")
UNPAIRED_FILTERED_BAM = join("output", "PathSeq", "{patient}-{sample}", "filtered-unpaired.bam")

include: "../../pathogen-discovery-rules/rules/kraken.smk"

localrules: convert_FASTQ_to_BAM

rule all:
    input:
        expand(UNPAIRED_FILTERED_BAM, zip, patient=samples["patient"], sample=samples["sample"]),
        expand(PAIRED_FILTERED_BAM, zip, patient=samples["patient"], sample=samples["sample"]),

# let's run PathSeqFilterSpark for batches of 20 samples
batch_size = 20
n_samples = samples.shape[0]
n_batches = math.ceil(n_samples/batch_size)
sample_list = np.array_split(samples, n_batches)
for i in range(0, n_batches):
    rule:
        input:
            paired = expand(join("output", "PathSeq", "{patient}-{sample}", "{batch}-filtered-paired.bam"),
                   zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"],
                   batch=i),
            unpaired = expand(join("output", "PathSeq", "{patient}-{sample}", "{batch}-filtered-unpaired.bam"),
                   zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"],
                   batch=i),
        output:
            paired = expand(join("output", "PathSeq", "{patient}-{sample}", "filtered-paired.bam"),
                   zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"]),
            unpaired = expand(join("output", "PathSeq", "{patient}-{sample}", "filtered-unpaired.bam"),
                   zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"]),
        group:
            "PathSeqFilter"
        run:
            for i1, i2, o1, o2 in zip(input.paired, input.unpaired, output.paired, output.unpaired):
                shell("mv {i1} {o1}")
                shell("mv {i2} {o2}")



rule convert_FASTQ_to_BAM:
    input:
        fq1=RAW_FASTQ1_FILE,
        fq2=RAW_FASTQ2_FILE
    output:
        config["PathSeq"]["bam_file"]
    shell:
        "module load picard && "
        "java -Xmx8g -XX:ParallelGCThreads=5 -jar $PICARDJARPATH/picard.jar "
        "FastqToSam F1={input.fq1} F2={input.fq2} O={output} "
        "SM={wildcards.sample} RG={wildcards.sample} "
        "TMP_DIR=/lscratch/$SLURM_JOBID"

rule move_and_rename_FASTQ_File:
    input:
        RAW_FASTQ1_FILE,
        RAW_FASTQ2_FILE
    output:
        temp(FASTQ1_FILE),
        temp(FASTQ2_FILE)
    shell:
        "cp {input[0]} {output[0]} && "
        "cp {input[1]} {output[1]}"
