from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
# patient = config["patient"]
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
# print(samples)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
# validate(units, schema="schemas/units.schema.yaml")
patients = [
    "Mel102", "Mel103", "Mel105", "Mel106", "Mel110", "Mel112", "Mel121_1",
    "Mel128", "Mel129pa", "Mel98", "Mel194"
]
samples = samples.loc[samples.patient.isin(patients)]
#samples = samples.loc[samples.plate == plate]
# samples = samples.sample(frac=1, random_state=0)
# nrows = min(30, samples.shape[0])
# samples = samples.iloc[0:nrows]
# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_3.fastq.gz")

# include rules
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-batch.smk"


rule all:
    input:
        expand(TRIMMED_FASTQ1_FILE, zip, sample=samples["sample"], patient=samples["patient"]),



rule download_FASTQ_files:
    group:
        "FASTQ"
    params:
        fq1 = lambda wildcards: samples.loc[(wildcards.patient, wildcards.sample), "fastq1"],
        fq2 = lambda wildcards: samples.loc[(wildcards.patient, wildcards.sample), "fastq2"],
    output:
        fq1=temp(FASTQ1_FILE),
        fq2=temp(FASTQ2_FILE)
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq1} {output.fq1}  && "
        "gsutil cp {params.fq2} {output.fq2}"
