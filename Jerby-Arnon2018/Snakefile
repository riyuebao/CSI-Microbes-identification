from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
# patient = config["patient"]
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)
#samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
patients_of_interest = [
    "Mel102", "Mel103", "Mel105", "Mel106", "Mel110", "Mel112", "Mel129", "Mel194"
]
cells = cells.loc[cells.patient.isin(patients_of_interest)]
print(cells.shape)
wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),

# directories
FASTQ_DIR = "FASTQ"
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")

PATHSEQ_BAM_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PATHSEQ_CELL_SCORE_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")


# include rules
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"


rule all:
    input:
        expand(PATHSEQ_CELL_SCORE_FILE, zip, sample=cells["sample"], patient=cells["patient"], plate=cells["plate"], cell=cells["cell"]),


rule download_FASTQ_files:
    group:
        "FASTQ"
    params:
        fq1 = lambda wildcards: cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "fastq1"],
        fq2 = lambda wildcards: cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "fastq2"],
    output:
        fq1=FASTQ1_FILE,
        fq2=FASTQ2_FILE
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq1} {output.fq1}  && "
        "gsutil cp {params.fq2} {output.fq2}"
