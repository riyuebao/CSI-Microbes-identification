from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

#plate = config["plate"]
##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
# print(samples)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
samples = samples.loc[samples.status == "LT2-infected"]
samples = samples.iloc[0]
# validate(units, schema="schemas/units.schema.yaml")
#samples = samples.loc[samples.plate == plate]
# URLs
#D23580_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/027/025/GCF_000027025.1_ASM2702v1/GCF_000027025.1_ASM2702v1_genomic.fna.gz"
#LT2_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz"

# directories
RAW_FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{sample}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{sample}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_3.fastq.gz")
FAILED_READS_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_failed.fastq.gz")
HTML_REPORT = join("FASTQ", "trimmed", "{patient}-{sample}_report.html")
# Output Files
PathSeq_Output_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")
PathSeq_BAM_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")


# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
# include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
# include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"
# include: "../pathogen-discovery-rules/rules/make-PathSeq-files.smk"


rule all:
    input:
        expand("output/PathoScope/{patient}-{sample}.sam", zip, sample=samples["sample"], patient=samples["patient"]),
        # "new_subspecies_genome.fa",
        # join("data", "ERCC92.fa"),
        # "raw/genome/GRCh38.p13.genome.fa"

rule PathoMap:
    conda:
        "../envs/pathoscope.yaml"
    input:
        TRIMMED_FASTQ1_FILE,
        TRIMMED_FASTQ2_FILE,
        "new_subspecies_genome.fa",
        join("data", "ERCC92.fa"),
        "raw/genome/GRCh38.p13.genome.fa"
    output:
        "output/PathoScope/{patient}-{sample}.sam"
    shell:
        "mkdir output/PathoScope && "
        "pathoscope MAP -1 {input[0]} -2 {input[1]} "
        "-targetRefFiles {input[2]} -filterRefFiles {input[3]},{input[4]} "
        "-outDir output/PathoScope"

rule add_tax_id_fasta:
    conda:
        "../envs/pathoscope.yaml"
    input:
        "../Aulicino-CAMMiQ/data/subspecies_genome.fa"
    output:
        "new_subspecies_genome.fa"
    shell:
        "bash src/pasteTaxID.bash --multifasta {input}"

# rule download_combine_subspe_genomes:
#     input:
#         join("data", "microbe_subset_assembly_summary.txt")
#     output:
#         join("data", "microbev1.fa")
#     run:
#         df = pd.read_csv(input[0], sep="\t")
#         shell("touch {output}")
#         for index, row in df.iterrows():
#             url = row["url"]
#             shell("wget -O - {url} | gunzip -c >> {output}")


# rules for downloading sequencing data
rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[0]} > {output[0]} && "
        "gzip -vc {input[1]} > {output[1]}"

rule download_FASTQ_from_SRA:
    conda:
        "../envs/sra.yml"
    group:
        "FASTQ"
    params:
        RAW_FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        #"module load sratoolkit && "
        "fasterq-dump -O {params} "#"-t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.sample}"
