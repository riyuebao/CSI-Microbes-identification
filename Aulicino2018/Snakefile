from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

#plate = config["plate"]
##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),

# directories
FASTQ_DIR = join("FASTQ")
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")
FAILED_READS_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_failed.fastq.gz")
HTML_REPORT = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_report.html")
# Output Files
#PathSeq_Output_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")
PathSeq_BAM_File = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PathSeq_Cell_Score_File = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

SRPRISM_INPUT_FQ1 = join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned_1.fq")
SRPRISM_INPUT_FQ2 = join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned_2.fq")
SRPRISM_COUNT_FILE = join("output", "star", "{patient}-{sample}", "{genome}.tsv")

# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
#include: "../RNA-snakemake-rules/rules/SRPRISM-paired.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"
include: "../pathogen-discovery-rules/rules/CAMMiQ.smk"

plates = cells[["patient", "sample", "plate"]].drop_duplicates()

# LT2_cells = cells.loc[cells.infection.isin(["LT2", "D23580"])]
# LT2_cells = LT2_cells.iloc[0:10]


rule all:
    input:
        expand(CAMMIQ_COUNT_FILE, tax_level="species")
        #expand(STAR_SE_BAM_FILE,  zip, patient="Pt0", sample="S0"),
        #expand(STAR_PE_BAM_FILE,  zip, patient="Pt0", sample="S0"),

# def get_bam_files(wildcards):
#     c = cells.loc[cells.infected == wildcards.genome]
#     expand(SRPRISM_PROPER_PAIRED_PRIMARY_BAM,  zip, patient=c["patient"], sample=c["sample"], plate=c["plate"], cell=c["cell"], genome=c["infection"])
#
#
# rule count_nreads:
#     conda:
#         "../envs/pysam-env.yaml"
#     input:
#         get_bam_files
#     output:
#         SRPRISM_COUNT_FILE
#     script:
#         "src/count_nreads.py"
#
# rule convert_BAM_to_FASTQ:
#     group:
#         "SRPRISM"
#     input:
#         join("output", "star", "{patient}-{sample}-{plate}-{cell}", "qname.sorted.unaligned.paired.bam")
#     output:
#         join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned_1.fq"),
#         join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned_2.fq")
#     shell:
#         "module load bedtools && "
#         "bamToFastq -i {input} -fq {output[0]} -fq2 {output[1]}"
#
# rule split_STAR_unaligned_BAM_by_RG:
#     group:
#         "SRPRISM"
#     input:
#         pathseq_bam = join("output", "star", "{patient}-{sample}-{plate}", "unaligned.bam"),
#     output:
#         temp(join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned.bam")),
#     shell:
#         "module load samtools && "
#         "samtools view -h -b -r {wildcards.cell} {input} > {output}"
#
# rule sort_unaligned_reads_by_queryname:
#     group:
#         "SRPRISM"
#     input:
#         join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned.paired.bam"),
#     output:
#         temp(join("output", "star", "{patient}-{sample}-{plate}-{cell}", "qname.sorted.unaligned.paired.bam")),
#     shell:
#         "module load picard && "
#         "java -jar $PICARDJARPATH/picard.jar SortSam "
#         "I={input} O={output} SORT_ORDER=queryname"
#
# rule extract_unaligned_paired_reads:
#     group:
#         "SRPRISM"
#     input:
#         join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned.bam"),
#     output:
#         temp(join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned.paired.bam")),
#     shell:
#         "module load samtools && "
#         "samtools view -h -b -f 1 {input} > {output}"

# rule download_combine_subspe_genomes:
#     input:
#         join("data", "microbe_subset_assembly_summary.txt")
#     output:
#         join("data", "microbev1.fa")
#     run:
#         df = pd.read_csv(input[0], sep="\t")
#         shell("touch {output}")
#         for index, row in df.iterrows():
#             url = row["url"]
#             shell("wget -O - {url} | gunzip -c >> {output}")

def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

# rules for downloading sequencing data
rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[FQ1]} > {output[0]} && "
        "gzip -vc {input[FQ2]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        RAW_FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
