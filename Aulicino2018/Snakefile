from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/CAMMiQ-subspecies-comparison-config.yaml"
# configfile: "config/PathSeq-config.yaml"
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
# print(samples)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
# validate(units, schema="schemas/units.schema.yaml")

# URLs
#D23580_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/027/025/GCF_000027025.1_ASM2702v1/GCF_000027025.1_ASM2702v1_genomic.fna.gz"
#LT2_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz"

# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(FASTQ_DIR,  "{sample}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{sample}_2.fastq")
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")

# Output Files
PathSeq_Output_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")
PathSeq_BAM_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")


# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-batch.smk"


rule all:
    input:
        config["PathSeq"]["microbe_bwa_image"],
        config["PathSeq"]["microbe_dict"],
        config["PathSeq"]["microbe_fai"],
        #expand(PathSeq_BAM_File, zip, sample=samples["sample"], patient=samples["patient"])

# rules for downloading microbe genomes
rule download_combine_subspe_genomes:
    input:
        join("data", "genome_map_subsp.tsv")
    output:
        join("output", "subspecies_genome.fa")
    run:
        df = pd.read_csv(input[0], sep="\t")
        shell("touch {output}")
        for index, row in df.iterrows():
            url = join(row["ftp_path"], file)
            shell("wget -O - {url} | gunzip -c >> {output}")


# rules for downloading sequencing data
rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[0]} > {output[0]} && "
        "gzip -vc {input[1]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.sample}"

# rules for adding D23580 genome
# # rules for adding DS23580 genome to the PathSeq DB
# localrules: download_D23580_complete_genome, add_D23580_to_PathSeq_DB
#
# rule add_D23580_to_PathSeq_DB:
#     input:
#         D23580_FA,
#         PATHSEQ_FA_FILE
#     output:
#         PATHSEQ_D23580_FA_FILE
#     shell:
#         "cat {input[0]} {input[1]} > {output}"
#
# rule download_D23580_complete_genome:
#     params:
#         url=D23580_URL
#     output:
#         D23580_FA
#     shell:
#         "wget -O - {params.url} | gunzip -c > {output}"
