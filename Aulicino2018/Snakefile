from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

#plate = config["plate"]
##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)

# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")
FAILED_READS_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_failed.fastq.gz")
HTML_REPORT = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_report.html")
# Output Files
#PathSeq_Output_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")
#PathSeq_BAM_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")


# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
#include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
#include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"
#include: "../pathogen-discovery-rules/rules/make-PathSeq-files.smk"

plates = cells[["patient", "sample", "plate"]].drop_duplicates()

rule all:
    input:
        expand(STAR_PE_BAM_FILE,  zip, patient=plates["patient"], sample=plates["sample"], plate=plates["plate"]),
        expand(STAR_SE_BAM_FILE,  zip, patient=plates["patient"], sample=plates["sample"], plate=plates["plate"])

# rule download_combine_subspe_genomes:
#     input:
#         join("data", "microbe_subset_assembly_summary.txt")
#     output:
#         join("data", "microbev1.fa")
#     run:
#         df = pd.read_csv(input[0], sep="\t")
#         shell("touch {output}")
#         for index, row in df.iterrows():
#             url = row["url"]
#             shell("wget -O - {url} | gunzip -c >> {output}")

def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

# rules for downloading sequencing data
rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[FQ1]} > {output[0]} && "
        "gzip -vc {input[FQ2]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
