from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"

# URLs
LT2_genome_URL = "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz"
D23580_genome_URL = "ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/900/538/085/GCF_900538085.1_D23580_liv/GCF_900538085.1_D23580_liv_genomic.fna.gz"

# metadata
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),
    genome="LT2|D23580"

# directories
FASTQ_DIR = join("FASTQ")
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files for cells
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")

# PathSeq Output Files
PathSeq_BAM_File = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PathSeq_Cell_Score_File = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

# SRPRISM Output Files
SRPRISM_INPUT_FQ1 = join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned_1.fq")
SRPRISM_INPUT_FQ2 = join("output", "star", "{patient}-{sample}-{plate}-{cell}", "unaligned_2.fq")
SRPRISM_COUNT_FILE = join("output", "SRPRISM", "{patient}", "{sample}", "{genome}.tsv")
SRPRISM_16S_BAM = join("output", "SRPRISM", "{patient}", "{sample}-{plate}-{cell}", "{genome}-paired.16S.primary.sorted.bam")
SRPRISM_NON_16S_BAM = join("output", "SRPRISM", "{patient}", "{sample}-{plate}-{cell}", "{genome}-paired.non16S.primary.sorted.bam")
# include rules
include: "../RNA-snakemake-rules/rules/ERCC92.smk"
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
include: "../RNA-snakemake-rules/rules/SRPRISM-paired.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"
include: "../pathogen-discovery-rules/rules/CAMMiQ.smk"

plates = cells[["patient", "sample", "plate"]].drop_duplicates()

cells = cells.loc[cells.infection.isin(["LT2", "D23580"])]
#D23580_cells = cells.loc[cells.infection == "D23580"]
# LT2_cells = LT2_cells.iloc[0:10]


rule all:
    input:
        expand(SRPRISM_COUNT_FILE, patient="Pt0", sample="S0",
               genome=["LT2", "D23580"])
        expand(SRPRISM_PROPER_PAIRED_PRIMARY_SORTED_BAI, zip,
               patient=cells["patient"], sample=cells["sample"],
               plate=cells["plate"], cell=cells["cell"], genome=cells["infection"])
        expand(SRPRISM_16S_BAM, zip,
               patient=cells["patient"], sample=cells["sample"],
               plate=cells["plate"], cell=cells["cell"], genome=cells["infection"])
        expand(SRPRISM_NON_16S_BAM, zip,
               patient=cells["patient"], sample=cells["sample"],
               plate=cells["plate"], cell=cells["cell"], genome=cells["infection"])

# rules for manipulating SPRISM bam files
rule filter_by_region:
    input:
        SRPRISM_PROPER_PAIRED_PRIMARY_SORTED_BAM,
        SRPRISM_PROPER_PAIRED_PRIMARY_SORTED_BAI
    output:
        SRPRISM_16S_BAM,
        SRPRISM_NON_16S_BAM
    shell:
        "module load samtools && "
        "samtools view -h -b -L data/{wildcards.genome}_16S.bed -U {output[1]} {input[0]} > {output[0]}"

def get_bam_files(wildcards):
    c = cells.loc[cells.infection == wildcards.genome]
    return expand(SRPRISM_PROPER_PAIRED_PRIMARY_BAM,  zip, patient=c["patient"], sample=c["sample"], plate=c["plate"], cell=c["cell"], genome=c["infection"])

def get_cells(wildcards):
    c = cells.loc[cells.infection == wildcards.genome]
    return c["cell"]

rule count_total_reads:
    params:
        cells=get_cells
    conda:
        "../envs/pysam-env.yaml"
    input:
        get_bam_files
    output:
        SRPRISM_COUNT_FILE
    script:
        "src/count_nreads.py"

# rule download_combine_subspe_genomes:
#     input:
#         join("data", "microbe_subset_assembly_summary.txt")
#     output:
#         join("data", "microbev1.fa")
#     run:
#         df = pd.read_csv(input[0], sep="\t")
#         shell("touch {output}")
#         for index, row in df.iterrows():
#             url = row["url"]
#             shell("wget -O - {url} | gunzip -c >> {output}")

# Rules and functions for downloading genome files
rule download_D23580_genome:
    wildcard_constraints:
        genome="D23580"
    params:
        D23580_genome_URL
    output:
        GENOME_FA
    shell:
        "wget -O - {params[0]} | gunzip -c > {output}"

rule download_LT2_genome:
    wildcard_constraints:
        genome="LT2"
    params:
        LT2_genome_URL
    output:
        GENOME_FA
    shell:
        "wget -O - {params[0]} | gunzip -c > {output}"

# Rules and functions for downloading sequencing data

def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[FQ1]} > {output[0]} && "
        "gzip -vc {input[FQ2]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        RAW_FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
