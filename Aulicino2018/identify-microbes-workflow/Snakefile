from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
# print(samples)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
# validate(units, schema="schemas/units.schema.yaml")

# URLs
D23580_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/027/025/GCF_000027025.1_ASM2702v1/GCF_000027025.1_ASM2702v1_genomic.fna.gz"
LT2_URL = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/006/945/GCF_000006945.2_ASM694v2/GCF_000006945.2_ASM694v2_genomic.fna.gz"
ERCC92_URL = "https://tools.thermofisher.com/content/sfs/manuals/ERCC92.zip"
# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(FASTQ_DIR,  "{sample}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{sample}_2.fastq")
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")
D23580_FA = join("data", "D23580_genomic.fna")
LT2_FA = join("data", "LT2_genomic.fna")
ERCC92_FA = join("data", "ERCC92.fa")
ERCC92_GTF = join("data", "ERCC92.gtf")
PATHSEQ_FA_FILE = "/data/Robinson-SB/PathSeq-data/pathseq_microbe.fa"
LT2_D23580_FA_FILE = join("data", "LT2_D23580.fa")
PATHSEQ_D23580_FA_FILE = join("data", "D23580+PathSeq.fa")
# Output Files
PathSeq_Output_File = join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")

# include rules
include: "../../RNA-snakemake-rules/rules/genome.smk"
include: "../../RNA-snakemake-rules/rules/STAR.smk"
include: "../../pathogen-discovery-rules/rules/make-PathSeq-files.smk"
include: "../../pathogen-discovery-rules/rules/PathSeq.smk"

localrules: download_ERCC92_spike_ins, download_D23580_complete_genome, download_LT2_complete_genome, combine_LT2_D23580
# localrules: combine_human_ERCC92_GTF, combine_human_ERCC92_fasta

#wildcard_constraints:
#    sample="SRR*"

rule all:
    input:
        #LT2_D23580_ERCC92_FA_FILE
        expand(PathSeq_Output_File, zip, patient=samples["patient"], sample=samples["sample"])

rule add_D23580_to_PathSeq_DB:
    input:
        D23580_FA,
        PATHSEQ_FA_FILE
    output:
        PATHSEQ_D23580_FA_FILE
    shell:
        "cat {input[0]} {input[1]} > {output}"

rule combine_LT2_D23580:
    input:
        LT2_FA,
        D23580_FA
    output:
        LT2_D23580_FA_FILE
    shell:
        "cat {input[0]} {input[1]} > {output}"

rule download_LT2_complete_genome:
    params:
        url=LT2_URL
    output:
        LT2_FA
    shell:
        "wget -O - {params.url} | gunzip -c > {output}"

rule download_D23580_complete_genome:
    params:
        url=D23580_URL
    output:
        D23580_FA
    shell:
        "wget -O - {params.url} | gunzip -c > {output}"

#rule combine_human_ERCC92_fasta:
#    input:
#        config["PathSeq"]["genome"],
#        ERCC92_FA
#    output:
#        config["ref"]["genome"]
#    shell:
#        "cat {input[0]} {input[1]} > {output}"

#rule combine_human_ERCC92_GTF:
#    input:
#        config["PathSeq"]["annotation"],
#        ERCC92_GTF
#    output:
#        config["ref"]["annotation"]
#    shell:
#        "cat {input[0]} {input[1]} > {output}"

rule download_ERCC92_spike_ins:
    params:
        url=ERCC92_URL,
        odir="data"
    output:
        zip=temp("ERCC92.zip"),
        gtf=ERCC92_GTF,
        fa=ERCC92_FA
    shell:
        "wget {params.url} && unzip {output.zip} -d {params.odir}"


rule compress_FASTQ_File:
    input:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[0]} > {output[0]} && "
        "gzip -vc {input[1]} > {output[1]}"

rule download_FASTQ_from_SRA:
    params:
        FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.sample}"
