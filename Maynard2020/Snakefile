from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)
#samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
cells = cells.loc[cells["sample"].isin(["LT_S08"])]
# directories
FASTQ_DIR = "FASTQ"
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")

# file containing sequences for RNA Spike In sequences
RNA_SPIKE_SEQUENCES = join("data", "spike_in_sequences.fa")
# handcrafted TODO generate from fasta file
RNA_SPIKE_GTF = join("data", "spike_in_sequences.gtf")

pathseq_bam = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")

# include rules
#include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
#include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
#include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"


rule all:
    input:
        expand(TRIMMED_FASTQ1_FILE, zip, sample=cells["sample"], patient=cells["patient"], cell=cells["cell"])


def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        temp(FASTQ1_FILE),
        temp(FASTQ2_FILE)
    benchmark:
        "benchmark/{patient}-{sample}-{cell}-compress_FASTQ_File.txt"
    shell:
        "gzip -vc {input[FQ1]} > {output[0]} && "
        "gzip -vc {input[FQ2]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        RAW_FASTQ_DIR,
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    benchmark:
        "benchmark/{run}-download_FASTQ_from_SRA.txt"
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
