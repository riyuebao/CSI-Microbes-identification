from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
# patient = config["patient"]
# malignant = config["celltype"]
# start = config["start"]
# stop = config["stop"]
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

# patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)
# print(samples)
# cells.index = cells.index.set_levels([i.astype(str) for i in cells.index.levels])  # enforce str in index

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),

plates_of_interest = [
    "cy53_1_CD45_neg", "Cy71_CD45", "CY80_neg", "cy80_CD45_neg",
    "Cy81_Bulk_CD45", "Cy81_FNA_CD45", "cy82_CD45_pos_1", "cy82_CD45_pos_2",
    "cy82_CD45_pos_3", "cy94_cd45neg_cd90pos"
]
# removed - "Cy80_II_CD45",
# samples = samples.loc[samples.plate.isin(plates_of_interest)]
# samples = samples.loc[samples["patient"] == "Melanoma_53"]
# print(samples)
# directories
FASTQ_DIR = join("FASTQ")
RAW_FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")

PATHSEQ_BAM_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PATHSEQ_CELL_SCORE_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

# include rules
#include: "../RNA-snakemake-rules/rules/genome.smk"
#include: "../RNA-snakemake-rules/rules/trim.smk"
#include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
#include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
#include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"

rule all:
    input:
        expand(FASTQ1_FILE, zip, patient=cells["patient"], sample=cells["sample"], cell=cells["cell"])


rule download_FASTQ_files:
    group:
        "FASTQ"
    params:
        fq1 = lambda wildcards: cells.at[(wildcards.patient, wildcards.sample, wildcards.cell), "fq1_url"],
        fq2 = lambda wildcards: cells.at[(wildcards.patient, wildcards.sample, wildcards.cell), "fq2_url"],
    output:
        fq1=FASTQ1_FILE,
        fq2=FASTQ2_FILE
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq1} {output.fq1}  && "
        "gsutil cp {params.fq2} {output.fq2}"
