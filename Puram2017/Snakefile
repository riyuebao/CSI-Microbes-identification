from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

ruleorder: download_FQ1_files_comb > download_FQ1_files
ruleorder: download_FQ2_files_comb > download_FQ2_files
localrules: download_FQ1_files_comb, download_FQ2_files_comb, download_FQ1_files, download_FQ2_files, run_fastp
##### load config and sample sheets #####
configfile: "config/PathSeq-config.yaml"

# patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False).sort_index()
# samples = samples.groupby("batch").sample(1, random_state=0)
# samples = samples.loc[samples["batch"] == "HNSCC6_P15_LN"]
plates_of_interest = [
    "HNSCC16_P4", "HNSCC16_P5", "HNSCC16_P7", "HNSCC17_P7", "HNSCC18_P7",
    "HNSCC20_P5_pri", "HNSCC22_P4", "HNSCC22_P5", "HN25_P24", "HN25_P25",
    "HNSCC25_P19_LN", "HNSCC25_P20", "HNSCC25_P22", "HN25_P5", "HNSCC25_P1_pri",
    "HNSCC25_P2", "HNSCC25_P3", "HNSCC25_P4", "HNSCC26_P23", "HN26_P5", "HN26_P6",
    "HNSCC26_P3", "HN26_P13", "HN26_P14", "HNSCC26_P12", "HN28_P14", "HN28_P15",
    "HNSCC28_P12", "HNSCC28_P13", "HN28_P5", "HNSCC5_P14_LN", "HNSCC5_P15",
    "HNSCC5_P7", "HNSCC5_P9", "HNSCC6_P15_LN", "HNSCC6_P16"
]
cells = cells.loc[cells.plate.isin(plates_of_interest)]

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),

# Directories
RAW_FASTQ_DIR = join("FASTQ", "raw")

# Temporary Files
FQ1_L1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L001_R1.fastq.gz")
FQ1_L2_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L002_R1.fastq.gz")
FQ1_L3_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L003_R1.fastq.gz")
FQ1_L4_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L004_R1.fastq.gz")
FQ2_L1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L001_R2.fastq.gz")
FQ2_L2_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L002_R2.fastq.gz")
FQ2_L3_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L003_R2.fastq.gz")
FQ2_L4_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_L004_R2.fastq.gz")

# Intermediate Files
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}_3.fastq.gz")

# Output Files
PATHSEQ_CELL_SCORE = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"


rule all:
    input:
        expand(PATHSEQ_CELL_SCORE, zip, patient=cells["patient"], sample=cells["sample"], plate=cells["plate"], cell=cells["cell"])


rule download_FQ1_files:
    group:
        "FASTQ"
    params:
        fq = lambda wildcards: cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "fastq_prefix"],
    output:
        fq1=FASTQ1_FILE
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq}_R1.fastq.gz {output.fq1}"

rule download_FQ2_files:
    group:
        "FASTQ"
    params:
        fq = lambda wildcards: cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "fastq_prefix"],
    output:
        fq2=FASTQ2_FILE
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq}_R2.fastq.gz {output.fq2}"

# each paired-end sample actually consists of 8 files
# {sample}-{well}_{sample_number}_{lane}_{end}_001.fastq.gz
# we need to download all four fastq files per end and combine them
rule download_FQ1_files_comb:
    group:
        "FASTQ"
    wildcard_constraints:
        sample=".+_comb"
    params:
        fq = lambda wildcards: cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "fastq_prefix"],
    output:
        L1=temp(FQ1_L1_FILE),
        L2=temp(FQ1_L2_FILE),
        L3=temp(FQ1_L3_FILE),
        L4=temp(FQ1_L4_FILE),
        fq1=FASTQ1_FILE
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq}_L001_R1_001.fastq.gz {output.L1}  && "
        "gsutil cp {params.fq}_L002_R1_001.fastq.gz {output.L2} && "
        "gsutil cp {params.fq}_L003_R1_001.fastq.gz {output.L3} && "
        "gsutil cp {params.fq}_L004_R1_001.fastq.gz {output.L4} && "
        "cat {output.L1} {output.L2} {output.L3} {output.L4} > {output.fq1}"

rule download_FQ2_files_comb:
    group:
        "FASTQ"
    wildcard_constraints:
        sample=".+_comb"
    params:
        fq = lambda wildcards: cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "fastq_prefix"],
    output:
        L1=temp(FQ2_L1_FILE),
        L2=temp(FQ2_L2_FILE),
        L3=temp(FQ2_L3_FILE),
        L4=temp(FQ2_L4_FILE),
        fq2=FASTQ2_FILE
    shell:
        "module load google-cloud-sdk && "
        "gsutil cp {params.fq}_L001_R2_001.fastq.gz {output.L1}  && "
        "gsutil cp {params.fq}_L002_R2_001.fastq.gz {output.L2} && "
        "gsutil cp {params.fq}_L003_R2_001.fastq.gz {output.L3} && "
        "gsutil cp {params.fq}_L004_R2_001.fastq.gz {output.L4} && "
        "cat {output.L1} {output.L2} {output.L3} {output.L4} > {output.fq2}"
