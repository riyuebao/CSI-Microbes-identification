from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
# print(samples)
lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
samples = lanes[["sample", "patient"]].drop_duplicates()
cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)
cells = cells.loc[cells["sample"] == "Sample6a"]
# samples = samples.iloc[0:2]

PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_S1_{lane}_R1_001.fastq.gz")
cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_S1_{lane}_R2_001.fastq.gz")
IDX_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_S1_{lane}_I1_001.fastq.gz")
CR_BAM_FILE = join(CR_SAMPLE_ODIR, "outs", "possorted_genome_bam.bam")
PATHSEQ_BAM = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")
PATHSEQ_TAG_BAM = join("output", "PathSeq", "{patient}-{sample}", "pathseq_with_tags.bam")
PATHSEQ_CELL_BAM = join("output", "PathSeq", "{patient}-{sample}-{cell}", "pathseq_with_tags.bam")

include: "../RNA-snakemake-rules/rules/cellranger.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-single.smk"

rule all:
    input:
        expand(PATHSEQ_CELL_BAM, zip, patient=cells["patient"], sample=cells["sample"], cell=cells["barcode"]),
        # expand(join("output", "PathSeq", "{patient}-{sample}-{cell}", "pathseq.bam"), zip, sample=cells["sample"], patient=cells["patient"], cell=cells["barcode"])


rule filter_PathSeq_by_CB_UMI:
    params:
        barcodes = lambda wildcards: units.loc[units["sample"] == wildcards.sample]["barcodes"]
    input:
        CR_BAM_FILE,
        PATHSEQ_BAM,
        config["units"]
    output:
        PATHSEQ_TAG_BAM,
        expand(PATHSEQ_CELL_BAM, cell=params.barcodes, sample="{sample}", patient="{patient}")
    script:
        "src/add_tags_to_PathSeq_bam.py"

# download each sample/lane
rule download_FASTQ_files:
    params:
        R1 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "cell_barcode_fastq_url"],
        R2 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "cDNA_fastq_url"],
        I1 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "IDX_fastq_url"]
    output:
        CB_FASTQ_FILE,
        cDNA_FASTQ_FILE,
        IDX_FASTQ_FILE
    shell:
        "echo {params} && "
        "wget -O {output[0]} {params[R1]} && "
        "wget -O {output[1]} {params[R2]} && "
        "wget -O {output[2]} {params[I1]}"
