from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
# print(samples)
lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
samples = lanes[["sample", "patient"]].drop_duplicates()
cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)

# samples = samples.iloc[0:2]

PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_S1_{lane}_R1_001.fastq.gz")
cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_S1_{lane}_R2_001.fastq.gz")
IDX_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_S1_{lane}_I1_001.fastq.gz")
CR_BAM_FILE = join(CR_SAMPLE_ODIR, "outs", "possorted_genome_bam.bam")
CR_CELL_BAM = join("output", "{patient}-{sample}", "{cell}.bam")

include: "../../RNA-snakemake-rules/rules/cellranger.smk"
include: "../../pathogen-discovery-rules/rules/PathSeq-single.smk"

rule all:
    input:
        expand(CR_CELL_BAM, patient="SC028", sample="Sample6a", cell="AAGGAGCGTGAGTATA-1")


rule filter_bam_by_cell:
    input:
        CR_BAM_FILE
    output:
        CR_CELL_BAM
    shell:
        "module load picard && "
        "java -jar $PICARDJARPATH/picard.jar FilterSamReads "
        "I={input} O={output} TAG=CB TAG_VALUE={wildcards.cell} "
        "FILTER=includeTagValues"

# download each sample/lane
rule download_FASTQ_files:
    params:
        R1 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "cell_barcode_fastq_url"],
        R2 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "cDNA_fastq_url"],
        I1 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "IDX_fastq_url"]
    output:
        CB_FASTQ_FILE,
        cDNA_FASTQ_FILE,
        IDX_FASTQ_FILE
    shell:
        "echo {params} && "
        "wget -O {output[0]} {params[R1]} && "
        "wget -O {output[1]} {params[R2]} && "
        "wget -O {output[2]} {params[I1]}"
