from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

patient = config["patient"]
##### load config and sample sheets #####
configfile: join("config", "original-config.yaml")
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
samples = samples.loc[samples["patient"] == patient]
# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(FASTQ_DIR,  "{sample}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{sample}_2.fastq")
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")
# file containing sequences for RNA Spike In sequences
RNA_SPIKE_SEQUENCES = join("data", "spike_in_sequences.fa")
# handcrafted TODO generate from fasta file
RNA_SPIKE_GTF = join("data", "spike_in_sequences.gtf")

pathseq_bam = join("output", "PathSeq", "{patient}-{sample}", "pathseq.bam")

# include rules
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-single.smk"


rule all:
    input:
        expand(pathseq_bam, zip, sample=samples["sample"], patient=samples["patient"])


rule combine_human_spikein_fasta:
    input:
        config["human_ref"]["genome"],
        RNA_SPIKE_SEQUENCES
    output:
        config["ref"]["genome"]
    shell:
        "cat {input[0]} {input[1]} > {output}"

rule combine_human_spikein_GTF:
   input:
       config["human_ref"]["annotation"],
       RNA_SPIKE_GTF
   output:
       config["ref"]["annotation"]
   shell:
       "cat {input[0]} {input[1]} > {output}"

# PathSeq doesn't like names so just add to Git for now
# rule download_RNA_spikes:
#     params:
#         url="https://www.ebi.ac.uk/arrayexpress/files/E-MTAB-5466/E-MTAB-5466.additional.1.zip",
#         dir="data"
#     output:
#         RNA_SPIKE_SEQUENCES,
#         temp("temp.zip"),
#         temp(join("data", "E-MTAB-5466_spike_in_concentration.txt"))
#     shell:
#         "wget {params.url} -O temp.zip && unzip temp.zip -d {params.dir}"

rule build_host_kmer_file:
    input:
        config["human_ref"]["genome"]
    output:
        config["PathSeq"]["host_bfi"]
    shell:
        "module load GATK/4.1.6.0 && "
        "gatk PathSeqBuildKmers "
        "--java-options '-Xmx80g' "
        "--reference '{input}' "
        "-O '{output}'"

  host_img: "output/PathSeq/host.fasta.img"
  host_bfi

rule build_host_BWA_image:
    input:
        config["human_ref"]["genome"]
    output:
        config["PathSeq"]["host_img"]
    shell:
        "module load GATK/4.1.6.0 && "
        "gatk BwaMemIndexImageCreator -I {input} -O {output}"

rule compress_FASTQ_File:
    group:
        "FASTA"
    input:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[0]} > {output[0]} && "
        "gzip -vc {input[1]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTA"
    params:
        FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.sample}"
