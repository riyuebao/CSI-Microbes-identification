from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

#wildcard_constraints:
#    patient="(?!_STAR).+",
#    sample="(?!_STAR).+",
#    plate="(?!_STAR).+",
    #sample="/^((?!_STAR).)*$/",
    #plate="/^((?!_STAR).)*$/",

#patient = config["patient"]
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
cells = pd.read_csv(config["units"], dtype=str, sep="\t").set_index(["patient", "sample", "cell"], drop=False)
# samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index
cells = cells.loc[cells["patient"].isin(["BC03", "BC04", "BC06", "BC07", "BC08"])]

wildcard_constraints:
    patient="|".join(cells["patient"].unique()),
    sample="|".join(cells["sample"].unique()),
    plate="|".join(cells["plate"].unique()),
    cell="|".join(cells["cell"].unique()),

#samples = samples.loc[sample["patient"].isin(["BC08"])]
#cells = cells.loc[cells["patient"].isin(["BC08"])]
# cells = cells.sample()
# directories
FASTQ_DIR = "FASTQ"
RAW_FASTQ_DIR = join(FASTQ_DIR, "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{run}_1.fastq")
SRA_FASTQ2_FILE = join(RAW_FASTQ_DIR, "{run}_2.fastq")
FASTQ1_FILE = join(RAW_FASTQ_DIR,  "{patient}-{sample}-{cell}_1.fastq.gz")
FASTQ2_FILE = join(RAW_FASTQ_DIR, "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_FASTQ1_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_1.fastq.gz")
TRIMMED_FASTQ2_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_2.fastq.gz")
TRIMMED_UNPAIRED_FILE = join("FASTQ", "trimmed", "{patient}-{sample}-{cell}_3.fastq.gz")

# file containing sequences for RNA Spike In sequences
RNA_SPIKE_SEQUENCES = join("data", "spike_in_sequences.fa")
# handcrafted TODO generate from fasta file
RNA_SPIKE_GTF = join("data", "spike_in_sequences.gtf")

PATHSEQ_BAM_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}", "pathseq.bam")
PATHSEQ_CELL_SCORE_FILE = join("output", "PathSeq", "{patient}-{sample}-{plate}-{cell}", "pathseq.txt")

# include rules
include: "../RNA-snakemake-rules/rules/genome.smk"
include: "../RNA-snakemake-rules/rules/trim.smk"
include: "../RNA-snakemake-rules/rules/STARsolo_SmartSeq.smk"
include: "../pathogen-discovery-rules/rules/filter-host-reads.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-host-filter-single.smk"

BENCHMARK_FILE = join("benchmarks", "{patient}-{run}.{rule}.benchmark.txt")

plates = cells[["patient", "sample", "plate"]].drop_duplicates()

rule all:
    input:
        expand(PATHSEQ_CELL_SCORE_FILE,  zip, patient=cells["patient"], sample=cells["sample"], plate=cells["plate"], cell=cells["cell"]),

def get_benchmark_files(wildcards):
    c = cells.loc[cells.plate == wildcards.plate]
    return expand(BENCHMARK_FILE, patient=wildcards.plate, rule=wildcards.rule, run=c["Run"])

rule combine_benchmark_statistics:
    wildcard_constraints:
        plate="BC08"
    input:
        get_benchmark_files
    output:
        "output/{plate}_{rule}.benchmark.tsv"
    script:
        "src/combine_benchmark_statistics.py"

rule combine_human_spikein_fasta:
    input:
        config["human_ref"]["genome"],
        RNA_SPIKE_SEQUENCES
    output:
        config["ref"]["genome"]
    shell:
        "cat {input[0]} {input[1]} > {output}"

rule combine_human_spikein_GTF:
   input:
       config["human_ref"]["annotation"],
       RNA_SPIKE_GTF
   output:
       config["ref"]["annotation"]
   shell:
       "cat {input[0]} {input[1]} > {output}"

# PathSeq doesn't like names so just add to Git for now
# rule download_RNA_spikes:
#     params:
#         url="https://www.ebi.ac.uk/arrayexpress/files/E-MTAB-5466/E-MTAB-5466.additional.1.zip",
#         dir="data"
#     output:
#         RNA_SPIKE_SEQUENCES,
#         temp("temp.zip"),
#         temp(join("data", "E-MTAB-5466_spike_in_concentration.txt"))
#     shell:
#         "wget {params.url} -O temp.zip && unzip temp.zip -d {params.dir}"

def get_SRA_fq_files(wildcards):
    run = cells.loc[(wildcards.patient, wildcards.sample, wildcards.cell), "Run"]
    return {
        "FQ1": SRA_FASTQ1_FILE.format(run=run),
        "FQ2": SRA_FASTQ2_FILE.format(run=run),
    }

rule compress_FASTQ_File:
    group:
        "FASTQ"
    input:
        unpack(get_SRA_fq_files)
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[0]} > {output[0]} && "
        "gzip -vc {input[1]} > {output[1]}"

rule download_FASTQ_from_SRA:
    group:
        "FASTQ"
    params:
        RAW_FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.run}"
