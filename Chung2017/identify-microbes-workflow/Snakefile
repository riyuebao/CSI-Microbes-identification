from os.path import join
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")

##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
samples = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample"], drop=False)
samples.index = samples.index.set_levels([i.astype(str) for i in samples.index.levels])  # enforce str in index

# directories
FASTQ_DIR = join("FASTQ", "raw")

# Intermediate Files
SRA_FASTQ1_FILE = join(FASTQ_DIR,  "{sample}_1.fastq")
SRA_FASTQ2_FILE = join(FASTQ_DIR, "{sample}_2.fastq")
FASTQ1_FILE = join(FASTQ_DIR,  "{patient}-{sample}_1.fastq.gz")
FASTQ2_FILE = join(FASTQ_DIR, "{patient}-{sample}_2.fastq.gz")
# file containing sequences for RNA Spike In sequences
RNA_SPIKE_SEQUENCES = join("data", "spike_in_sequences.fa")
# handcrafted TODO generate from fasta file
RNA_SPIKE_GTF = join("data", "spike_in_sequences.gtf")
# Output Files
PAIRED_FILTERED_BAM = join("output", "PathSeq", "{patient}-{sample}", "filtered-paired.bam")
KRAKEN_PAIRED_BIOM_FILE = join("output", "Kraken", "{patient}-{sample}", "paired-sequences.biom")
KRAKEN_UNPAIRED_BIOM_FILE = join("output", "Kraken", "{patient}-{sample}", "unpaired-sequences.biom")

# include rules
include: "../../RNA-snakemake-rules/rules/genome.smk"
include: "../../RNA-snakemake-rules/rules/STAR.smk"
include: "../../pathogen-discovery-rules/rules/make-Kraken-files.smk"
include: "../../pathogen-discovery-rules/rules/kraken.smk"


rule all:
    input:
        expand(KRAKEN_PAIRED_BIOM_FILE, zip, patient=samples["patient"], sample=samples["sample"]),
        expand(KRAKEN_UNPAIRED_BIOM_FILE, zip, patient=samples["patient"], sample=samples["sample"]),

batch_size = 1000
n_samples = samples.shape[0]
n_batches = math.ceil(n_samples/batch_size)
sample_list = np.array_split(samples, n_batches)
for i in range(0, n_batches):
    rule:
        input:
            paired = expand(join("output", "Kraken", "{patient}-{sample}", "{}-paired-sequences.kraken".format(i)),
                   zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"],),
            # unpaired = expand(join("output", "PathSeq", "{patient}-{sample}", "{}-filtered-unpaired.bam".format(i)),
            #        zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"]),
        output:
            paired = expand(join("output", "Kraken", "{patient}-{sample}", "paired-sequences.kraken"),
                   zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"]),
            # unpaired = expand(join("output", "PathSeq", "{patient}-{sample}", "filtered-unpaired.bam"),
            #        zip, patient=sample_list[i]["patient"], sample=sample_list[i]["sample"]),
        group:
            "Kraken"
        run:
            for i1, o1 in zip(input.paired, output.paired):
                shell("mv {i1} {o1}")
                # shell("mv {i2} {o2}")


rule combine_human_spikein_fasta:
    input:
        config["human_ref"]["genome"],
        RNA_SPIKE_SEQUENCES
    output:
        config["ref"]["genome"]
    shell:
        "cat {input[0]} {input[1]} > {output}"

rule combine_human_spikein_GTF:
   input:
       config["human_ref"]["annotation"],
       RNA_SPIKE_GTF
   output:
       config["ref"]["annotation"]
   shell:
       "cat {input[0]} {input[1]} > {output}"

# PathSeq doesn't like names so just add to Git for now
# rule download_RNA_spikes:
#     params:
#         url="https://www.ebi.ac.uk/arrayexpress/files/E-MTAB-5466/E-MTAB-5466.additional.1.zip",
#         dir="data"
#     output:
#         RNA_SPIKE_SEQUENCES,
#         temp("temp.zip"),
#         temp(join("data", "E-MTAB-5466_spike_in_concentration.txt"))
#     shell:
#         "wget {params.url} -O temp.zip && unzip temp.zip -d {params.dir}"

rule compress_FASTQ_File:
    input:
        SRA_FASTQ1_FILE,
        SRA_FASTQ2_FILE
    output:
        FASTQ1_FILE,
        FASTQ2_FILE
    shell:
        "gzip -vc {input[0]} > {output[0]} && "
        "gzip -vc {input[1]} > {output[1]}"

rule download_FASTQ_from_SRA:
    params:
        FASTQ_DIR
    output:
        temp(SRA_FASTQ1_FILE),
        temp(SRA_FASTQ2_FILE)
    shell:
        "module load sratoolkit && "
        "fasterq-dump -O {params} -t /lscratch/$SLURM_JOBID "
        "--split-files {wildcards.sample}"
