from os.path import join, basename
import pandas as pd
from snakemake.utils import min_version
##### set minimum snakemake version #####
min_version("5.1.2")
##### load config and sample sheets #####
configfile: join("config", "PathSeq-config.yaml")
#validate(config, schema="schemas/config.schema.yaml")
wildcard_constraints:
    patient="SC0[0-3][0-9]",
    sample="Sample[0-9][a-c]"

patients = pd.read_csv(config["patients"], sep="\t").set_index("patient", drop=False)
# validate(samples, schema="schemas/samples.schema.yaml")

lanes = pd.read_csv(config["samples"], dtype=str, sep="\t").set_index(["patient", "sample", "lane"], drop=False)
lanes.index = lanes.index.set_levels([i.astype(str) for i in lanes.index.levels])  # enforce str in index
samples = lanes[["sample", "patient"]].drop_duplicates()
# cells = pd.read_csv(config["units"], sep="\t").set_index(["sample", "barcode", "patient"], drop=False)


PATIENT_FASTQ_DIR = join("FASTQ", "raw", "{patient}")
CR_SAMPLE_ODIR = "{patient}-{sample}"

CB_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R1_001.fastq.gz")
cDNA_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_R2_001.fastq.gz")
# IDX_FASTQ_FILE = join(PATIENT_FASTQ_DIR, "{sample}_{lane}_I1_001.fastq.gz")
CR_BAM_FILE = join(CR_SAMPLE_ODIR, "outs", "possorted_genome_bam.bam")

pathseq_output = join("output", "PathSeq", "{patient}-{sample}", "pathseq.txt")

include: "../RNA-snakemake-rules/rules/cellranger.smk"
include: "../pathogen-discovery-rules/rules/PathSeq-single.smk"
# include: "../pathogen-discovery-rules/rules/scPathSeq.smk"

rule all:
    input:
        expand(pathseq_output, zip, patient=samples["patient"], sample=samples["sample"])
        # expand(cDNA_FASTQ_FILE, zip, patient=lanes["patient"], sample=lanes["sample"], lane=lanes["lane"]),
        # expand(PATHSEQ_CELL_SCORE, zip, patient=cells["patient"], sample=cells["sample"], cell=cells["barcode"]),
        # expand(join("output", "PathSeq", "{patient}-{sample}-{cell}", "pathseq.bam"), zip, sample=cells["sample"], patient=cells["patient"], cell=cells["barcode"])



# download each sample/lane
rule download_FASTQ_files:
    params:
        R1 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "CB_URL"],
        R2 = lambda wildcards: lanes.at[(wildcards.patient, wildcards.sample, wildcards.lane), "cDNA_URL"],
    output:
        CB_FASTQ_FILE,
        cDNA_FASTQ_FILE
    shell:
        "wget -O {output[0]} {params[R1]} && "
        "wget -O {output[1]} {params[R2]}"
